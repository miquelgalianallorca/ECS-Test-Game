//------------------------------------------------------------------
// TO DO
//------------------------------------------------------------------

// System/Component ideas
//------------------------------------------------------------------
- Movement System (use this both for characters and the camera)
	- input component: detect input, enabled
		- input could be disabled by UI (ie. pause menu)
		- input only enabled for currently controlled character
	- AI component: behaviour (generates input), enabled
		- NPCs have AI instead of input
		- Non-controlled characters enable their AI outside of combat (follow behaviour)
		- Disabled out of turn in combat
	- movement component: movement speed, enabled
		- movement can be disabled by combat system (in combat, out of turn)
		- movement can be disabled by effects (frozen, dead)
	- transform component: position, rotation
		- move base on input (speed = distance/time)
	- collider component: speed, collider shape
		- don't move if after the move we would be colliding
	- turn component: how much we've moved this turn
	- character stats component: how much we can move per turn (speed attribute?)

- Turn Combat System (keep a list of turn components - track turn order - update turn component on entities)
	- input component: detect input, enabled
		- key to end turn
	- AI component: enabled
	- turn component: active (bool set if it's the entity's current turn)
	- character stats component: bonus 
	+ StartCombat(): generate turn order
	+ bool NextTurn(): disable turn component of current turn haver, enable turn component of next one
		- return if there are no next turns, to end combat
	+ OnCombatEnd(): return components to their default state, remove turn combat system

- Render System
	- transform component: position, rotation
	- shape component (draw based on shape data)
	- collider component: speed
		- use the current speed to interpolate the drawing position


- UI

1)
-------------------------------------------------------------
¦----¦                                                  ¦   ¦2)
¦----¦                                                  ¦   ¦
¦----¦                                                  ¦   ¦
¦----¦                                                 >¦   ¦
¦                                                       ¦---¦
¦                                                           ¦
¦                 3)                                        ¦
¦                 ---------------------                     ¦
¦                 ¦  ¦  ¦  ¦  ¦  ¦  ¦  ¦                    ¦
-------------------------------------------------------------
1) Main character portraits
	- click to select and control (if not in combat)
	- highlight actor on hover
2) Initiative order (in combat)
	- marker for whose turn it is
3) Skill bar
	- 6 icons?
	- Show health/energy under bar?
	- Show hints on skill hover?
	- last skill is "pass" to end turn


"actor component"
	- health, speed
	- skills?
	- isPlayer? (only one party NPC starts as player)
	- isPartyNPC? (add to UI on entity created)
	- isEnemy? (add to AI on entity created)
	- ...

"effect" components
	- other stuff (water, fire)
	- damage over time
	- movement slowing
	- instant death
	- ...

"gamerules"
	- victory conditions?
	- getting somewhere? time limit? kill X enemies?
	- ...
//------------------------------------------------------------------



//------------------------------------------------------------------------------------
// Example for drawing sprites from spritesheet
//------------------------------------------------------------------------------------
int main(void)
{
    // Initialization
    //--------------------------------------------------------------------------------------
    const int screenWidth = 800;
    const int screenHeight = 450;

    InitWindow(screenWidth, screenHeight, "raylib [texture] example - sprite anim");

    // NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)
    Texture2D scarfy = LoadTexture("resources/scarfy.png");        // Texture loading

    Vector2 position = { 350.0f, 280.0f };
    Rectangle frameRec = { 0.0f, 0.0f, (float)scarfy.width/6, (float)scarfy.height };
    int currentFrame = 0;

    int framesCounter = 0;
    int framesSpeed = 8;            // Number of spritesheet frames shown by second

    SetTargetFPS(60);               // Set our game to run at 60 frames-per-second
    //--------------------------------------------------------------------------------------

    // Main game loop
    while (!WindowShouldClose())    // Detect window close button or ESC key
    {
        // Update
        //----------------------------------------------------------------------------------
        framesCounter++;

        if (framesCounter >= (60/framesSpeed))
        {
            framesCounter = 0;
            currentFrame++;

            if (currentFrame > 5) currentFrame = 0;

            frameRec.x = (float)currentFrame*(float)scarfy.width/6;
        }

        // Control frames speed
        if (IsKeyPressed(KEY_RIGHT)) framesSpeed++;
        else if (IsKeyPressed(KEY_LEFT)) framesSpeed--;

        if (framesSpeed > MAX_FRAME_SPEED) framesSpeed = MAX_FRAME_SPEED;
        else if (framesSpeed < MIN_FRAME_SPEED) framesSpeed = MIN_FRAME_SPEED;
        //----------------------------------------------------------------------------------

        // Draw
        //----------------------------------------------------------------------------------
        BeginDrawing();

            ClearBackground(RAYWHITE);

            DrawTexture(scarfy, 15, 40, WHITE);
            DrawRectangleLines(15, 40, scarfy.width, scarfy.height, LIME);
            DrawRectangleLines(15 + (int)frameRec.x, 40 + (int)frameRec.y, (int)frameRec.width, (int)frameRec.height, RED);

            DrawText("FRAME SPEED: ", 165, 210, 10, DARKGRAY);
            DrawText(TextFormat("%02i FPS", framesSpeed), 575, 210, 10, DARKGRAY);
            DrawText("PRESS RIGHT/LEFT KEYS to CHANGE SPEED!", 290, 240, 10, DARKGRAY);

            for (int i = 0; i < MAX_FRAME_SPEED; i++)
            {
                if (i < framesSpeed) DrawRectangle(250 + 21*i, 205, 20, 20, RED);
                DrawRectangleLines(250 + 21*i, 205, 20, 20, MAROON);
            }

            DrawTextureRec(scarfy, frameRec, position, WHITE);  // Draw part of the texture

            DrawText("(c) Scarfy sprite by Eiden Marsal", screenWidth - 200, screenHeight - 20, 10, GRAY);

        EndDrawing();
        //----------------------------------------------------------------------------------
    }

    // De-Initialization
    //--------------------------------------------------------------------------------------
    UnloadTexture(scarfy);       // Texture unloading

    CloseWindow();                // Close window and OpenGL context
    //--------------------------------------------------------------------------------------

    return 0;
}